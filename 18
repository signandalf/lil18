def func1(arg1, arg2):
    var22 = var5(arg1, arg2)
    var26 = func5(arg2, arg1)
    var31 = func7(arg2, var22)
    def func8(arg32, arg33):
        var34 = 728071547 ^ arg32 | (arg1 & -667)
        result = var31 + var26
        return result
    var35 = func8(arg1, var22)
    var59 = func9(var31, arg1)
    var60 = arg1 + var31
    var61 = (((arg1 - 649) & arg1) - var31) | var60 & var22 & 1296182764 & var31
    var62 = var26 | -857
    var63 = (var26 ^ (var59 + var22)) ^ (((var31 ^ (var35 + (-264 | var26 | (var22 ^ -28 & var35)))) - (var61 & (var22 | ((arg1 + var22 + var60) - var31 - arg2) | var26)) & -1790120071) ^ var59 - var35) ^ var61
    result = ((var35 ^ arg1 & (var22 & ((var60 & -313) ^ var35) + var31 & 128335185 + var22)) ^ arg2 & var61) | var60
    return result
def func9(arg36, arg37):
    var38 = 388 - (arg37 & arg37) - arg37
    var39 = 1597494616 + arg36
    var40 = var38 & -228 - var38 - arg36
    var41 = ((2018373279 - var40) | -142) | arg36
    var42 = var38 ^ var40
    var43 = var38 - var42 | 446041936 ^ var40
    var44 = (var40 & -478) & 497
    var45 = var38 - var40
    var46 = 636 ^ var38
    var47 = (arg37 - var40 & var40) ^ var41
    var48 = (-789115188 | var47) | var42 + var45
    var49 = (arg37 - var39 ^ var40) - arg37
    if var39 < var39:
        var50 = (var38 & var47 + var48) - var46
    else:
        var50 = var46 ^ arg37 | var41 | var40
    var51 = (var39 + var46) | (var41 | arg37)
    if var45 < var46:
        var52 = (var48 & var48) ^ var40 | arg37
    else:
        var52 = var41 - var46 & var46 & arg37
    var53 = var47 + var45
    var54 = var44 & var38 ^ var48
    var55 = var43 + var46 - var53 + var46
    if var40 < var41:
        var56 = (var38 | var40 - var38) - arg37
    else:
        var56 = var42 - (var49 ^ var53)
    var57 = (var49 ^ var38 - var47) - var44
    var58 = (var42 + var41) | var43 | var45
    result = var45 - (arg37 - var38 + var54) & (var53 & ((var42 - var47 ^ ((var45 - var51) & var38 ^ -889564822)) - var40))
    return result
def func7(arg27, arg28):
    var29 = 0
    for var30 in range(16):
        var29 += 9 + 5 + 7
    return var29
def func4(arg6, arg7):
    var8 = arg7 | 397
    var9 = (-169712677 + arg6 - var8) - var8
    var10 = var9 + 251
    if var9 < arg7:
        var11 = var9 ^ arg7
    else:
        var11 = arg7 ^ -343454874 & 168 + 1634421203
    var12 = var9 | var10
    var13 = var9 | var8
    var14 = arg6 - var13
    if arg7 < var9:
        var15 = ((var13 - var10) & var8) ^ arg7
    else:
        var15 = var14 ^ 824
    var16 = var14 | ((var10 - arg6) ^ arg7)
    var17 = var10 - arg7 - arg6 + var8
    var18 = (arg6 | arg6) - var17 | var13
    var19 = -1787621738 | var18
    var20 = var10 | -114
    var21 = arg7 & var12
    result = var8 & 387
    return result
def func3():
    closure = [-8]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func5(arg23, arg24):
    def func6(acc, rest):
        var25 = 0 + 0 + rest
        if acc == 0:
            return var25
        else:
            result = func6(acc - 1, var25)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 64'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var22 = var5(arg1, arg2)
    var26 = func5(arg2, arg1)
    var31 = func7(arg2, var22)
    def func8(arg32, arg33):
        var34 = 728071547 ^ arg32 | (arg1 & -667)
        result = var31 + var26
        return result
    var35 = func8(arg1, var22)
    var59 = func9(var31, arg1)
    var60 = arg1 + var31
    var61 = (((arg1 - 649) & arg1) - var31) | var60 & var22 & 1296182764 & var31
    var62 = var26 | -857
    var63 = (var26 ^ (var59 + var22)) ^ (((var31 ^ (var35 + (-264 | var26 | (var22 ^ -28 & var35)))) - (var61 & (var22 | ((arg1 + var22 + var60) - var31 - arg2) | var26)) & -1790120071) ^ var59 - var35) ^ var61
    result = ((var35 ^ arg1 & (var22 & ((var60 & -313) ^ var35) + var31 & 128335185 + var22)) ^ arg2 & var61) | var60
    return result
def func9(arg36, arg37):
    var38 = 388 - (arg37 & arg37) - arg37
    var39 = 1597494616 + arg36
    var40 = var38 & -228 - var38 - arg36
    var41 = ((2018373279 - var40) | -142) | arg36
    var42 = var38 ^ var40
    var43 = var38 - var42 | 446041936 ^ var40
    var44 = (var40 & -478) & 497
    var45 = var38 - var40
    var46 = 636 ^ var38
    var47 = (arg37 - var40 & var40) ^ var41
    var48 = (-789115188 | var47) | var42 + var45
    var49 = (arg37 - var39 ^ var40) - arg37
    if var39 < var39:
        var50 = (var38 & var47 + var48) - var46
    else:
        var50 = var46 ^ arg37 | var41 | var40
    var51 = (var39 + var46) | (var41 | arg37)
    if var45 < var46:
        var52 = (var48 & var48) ^ var40 | arg37
    else:
        var52 = var41 - var46 & var46 & arg37
    var53 = var47 + var45
    var54 = var44 & var38 ^ var48
    var55 = var43 + var46 - var53 + var46
    if var40 < var41:
        var56 = (var38 | var40 - var38) - arg37
    else:
        var56 = var42 - (var49 ^ var53)
    var57 = (var49 ^ var38 - var47) - var44
    var58 = (var42 + var41) | var43 | var45
    result = var45 - (arg37 - var38 + var54) & (var53 & ((var42 - var47 ^ ((var45 - var51) & var38 ^ -889564822)) - var40))
    return result
def func7(arg27, arg28):
    var29 = 0
    for var30 in range(16):
        var29 += 9 + 5 + 7
    return var29
def func4(arg6, arg7):
    var8 = arg7 | 397
    var9 = (-169712677 + arg6 - var8) - var8
    var10 = var9 + 251
    if var9 < arg7:
        var11 = var9 ^ arg7
    else:
        var11 = arg7 ^ -343454874 & 168 + 1634421203
    var12 = var9 | var10
    var13 = var9 | var8
    var14 = arg6 - var13
    if arg7 < var9:
        var15 = ((var13 - var10) & var8) ^ arg7
    else:
        var15 = var14 ^ 824
    var16 = var14 | ((var10 - arg6) ^ arg7)
    var17 = var10 - arg7 - arg6 + var8
    var18 = (arg6 | arg6) - var17 | var13
    var19 = -1787621738 | var18
    var20 = var10 | -114
    var21 = arg7 & var12
    result = var8 & 387
    return result
def func3():
    closure = [-8]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func5(arg23, arg24):
    def func6(acc, rest):
        var25 = 0 + 0 + rest
        if acc == 0:
            return var25
        else:
            result = func6(acc - 1, var25)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 64'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var22 = var5(arg1, arg2)
    var26 = func5(arg2, arg1)
    var31 = func7(arg2, var22)
    def func8(arg32, arg33):
        var34 = 728071547 ^ arg32 | (arg1 & -667)
        result = var31 + var26
        return result
    var35 = func8(arg1, var22)
    var59 = func9(var31, arg1)
    var60 = arg1 + var31
    var61 = (((arg1 - 649) & arg1) - var31) | var60 & var22 & 1296182764 & var31
    var62 = var26 | -857
    var63 = (var26 ^ (var59 + var22)) ^ (((var31 ^ (var35 + (-264 | var26 | (var22 ^ -28 & var35)))) - (var61 & (var22 | ((arg1 + var22 + var60) - var31 - arg2) | var26)) & -1790120071) ^ var59 - var35) ^ var61
    result = ((var35 ^ arg1 & (var22 & ((var60 & -313) ^ var35) + var31 & 128335185 + var22)) ^ arg2 & var61) | var60
    return result
def func9(arg36, arg37):
    var38 = 388 - (arg37 & arg37) - arg37
    var39 = 1597494616 + arg36
    var40 = var38 & -228 - var38 - arg36
    var41 = ((2018373279 - var40) | -142) | arg36
    var42 = var38 ^ var40
    var43 = var38 - var42 | 446041936 ^ var40
    var44 = (var40 & -478) & 497
    var45 = var38 - var40
    var46 = 636 ^ var38
    var47 = (arg37 - var40 & var40) ^ var41
    var48 = (-789115188 | var47) | var42 + var45
    var49 = (arg37 - var39 ^ var40) - arg37
    if var39 < var39:
        var50 = (var38 & var47 + var48) - var46
    else:
        var50 = var46 ^ arg37 | var41 | var40
    var51 = (var39 + var46) | (var41 | arg37)
    if var45 < var46:
        var52 = (var48 & var48) ^ var40 | arg37
    else:
        var52 = var41 - var46 & var46 & arg37
    var53 = var47 + var45
    var54 = var44 & var38 ^ var48
    var55 = var43 + var46 - var53 + var46
    if var40 < var41:
        var56 = (var38 | var40 - var38) - arg37
    else:
        var56 = var42 - (var49 ^ var53)
    var57 = (var49 ^ var38 - var47) - var44
    var58 = (var42 + var41) | var43 | var45
    result = var45 - (arg37 - var38 + var54) & (var53 & ((var42 - var47 ^ ((var45 - var51) & var38 ^ -889564822)) - var40))
    return result
def func7(arg27, arg28):
    var29 = 0
    for var30 in range(16):
        var29 += 9 + 5 + 7
    return var29
def func4(arg6, arg7):
    var8 = arg7 | 397
    var9 = (-169712677 + arg6 - var8) - var8
    var10 = var9 + 251
    if var9 < arg7:
        var11 = var9 ^ arg7
    else:
        var11 = arg7 ^ -343454874 & 168 + 1634421203
    var12 = var9 | var10
    var13 = var9 | var8
    var14 = arg6 - var13
    if arg7 < var9:
        var15 = ((var13 - var10) & var8) ^ arg7
    else:
        var15 = var14 ^ 824
    var16 = var14 | ((var10 - arg6) ^ arg7)
    var17 = var10 - arg7 - arg6 + var8
    var18 = (arg6 | arg6) - var17 | var13
    var19 = -1787621738 | var18
    var20 = var10 | -114
    var21 = arg7 & var12
    result = var8 & 387
    return result
def func3():
    closure = [-8]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func5(arg23, arg24):
    def func6(acc, rest):
        var25 = 0 + 0 + rest
        if acc == 0:
            return var25
        else:
            result = func6(acc - 1, var25)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 64'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var22 = var5(arg1, arg2)
    var26 = func5(arg2, arg1)
    var31 = func7(arg2, var22)
    def func8(arg32, arg33):
        var34 = 728071547 ^ arg32 | (arg1 & -667)
        result = var31 + var26
        return result
    var35 = func8(arg1, var22)
    var59 = func9(var31, arg1)
    var60 = arg1 + var31
    var61 = (((arg1 - 649) & arg1) - var31) | var60 & var22 & 1296182764 & var31
    var62 = var26 | -857
    var63 = (var26 ^ (var59 + var22)) ^ (((var31 ^ (var35 + (-264 | var26 | (var22 ^ -28 & var35)))) - (var61 & (var22 | ((arg1 + var22 + var60) - var31 - arg2) | var26)) & -1790120071) ^ var59 - var35) ^ var61
    result = ((var35 ^ arg1 & (var22 & ((var60 & -313) ^ var35) + var31 & 128335185 + var22)) ^ arg2 & var61) | var60
    return result
def func9(arg36, arg37):
    var38 = 388 - (arg37 & arg37) - arg37
    var39 = 1597494616 + arg36
    var40 = var38 & -228 - var38 - arg36
    var41 = ((2018373279 - var40) | -142) | arg36
    var42 = var38 ^ var40
    var43 = var38 - var42 | 446041936 ^ var40
    var44 = (var40 & -478) & 497
    var45 = var38 - var40
    var46 = 636 ^ var38
    var47 = (arg37 - var40 & var40) ^ var41
    var48 = (-789115188 | var47) | var42 + var45
    var49 = (arg37 - var39 ^ var40) - arg37
    if var39 < var39:
        var50 = (var38 & var47 + var48) - var46
    else:
        var50 = var46 ^ arg37 | var41 | var40
    var51 = (var39 + var46) | (var41 | arg37)
    if var45 < var46:
        var52 = (var48 & var48) ^ var40 | arg37
    else:
        var52 = var41 - var46 & var46 & arg37
    var53 = var47 + var45
    var54 = var44 & var38 ^ var48
    var55 = var43 + var46 - var53 + var46
    if var40 < var41:
        var56 = (var38 | var40 - var38) - arg37
    else:
        var56 = var42 - (var49 ^ var53)
    var57 = (var49 ^ var38 - var47) - var44
    var58 = (var42 + var41) | var43 | var45
    result = var45 - (arg37 - var38 + var54) & (var53 & ((var42 - var47 ^ ((var45 - var51) & var38 ^ -889564822)) - var40))
    return result
def func7(arg27, arg28):
    var29 = 0
    for var30 in range(16):
        var29 += 9 + 5 + 7
    return var29
def func4(arg6, arg7):
    var8 = arg7 | 397
    var9 = (-169712677 + arg6 - var8) - var8
    var10 = var9 + 251
    if var9 < arg7:
        var11 = var9 ^ arg7
    else:
        var11 = arg7 ^ -343454874 & 168 + 1634421203
    var12 = var9 | var10
    var13 = var9 | var8
    var14 = arg6 - var13
    if arg7 < var9:
        var15 = ((var13 - var10) & var8) ^ arg7
    else:
        var15 = var14 ^ 824
    var16 = var14 | ((var10 - arg6) ^ arg7)
    var17 = var10 - arg7 - arg6 + var8
    var18 = (arg6 | arg6) - var17 | var13
    var19 = -1787621738 | var18
    var20 = var10 | -114
    var21 = arg7 & var12
    result = var8 & 387
    return result
def func3():
    closure = [-8]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func5(arg23, arg24):
    def func6(acc, rest):
        var25 = 0 + 0 + rest
        if acc == 0:
            return var25
        else:
            result = func6(acc - 1, var25)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 64'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
